value(0).

value(V) :-
  value(V1), V = (V1 + 1), size(N), V1 <= N.

step(-1).

step(1).

diff(X, 0) :-
  step(X).

diff(0, Y) :-
  step(Y).

diff(X, Y) :-
  step(X), step(Y).

 { lives(X,Y) }  :-
  value(X), value(Y), X > 0, Y > 0, size(N), X <= N, Y <= N.

 :-
  3 {lives(X+DX,Y+DY):diff(DX,DY)} 3, not lives(X, Y), value(X), value(Y).

 :-
  lives(X, Y), not 2 {lives(X+DX,Y+DY):diff(DX,DY)} 3, value(X), value(Y).

 {start(XX,YY)}  :-
  lives(XX, YY).

 :-
  lives(X, Y), start(XX, YY), X < XX.

 :-
  lives(X, Y), start(XX, YY), Y < YY.

reached(XX, YY) :-
  start(XX, YY).

reached(XX, YY) :-
  reached(X, Y), value(X), value(Y), diff(DX, DY), XX = (X + DX), YY = (Y + DY), lives(XX, YY).

 :-
  lives(X, Y), not reached(X, Y), value(X), value(Y).

cspvar(live(X, Y), 0, 1) :-
  value(X), value(Y).

required(ezcsp__eq(live(X, Y), 0)) :-
  value(X), value(Y), not lives(X, Y).

required(ezcsp__eq(live(X, Y), 1)) :-
  value(X), value(Y), lives(X, Y).

size(5).

size(5).

